#| code-fold: show
#| message: false
library(fpp3)
library(rugarch)
#| code-fold: show
#| message: false
start_date <- '2018-01-01'
# esses são ativos de fundos imobiliários que eu ja tive
# e queria saber fiz um péssimo investimento
# ou apenas ruim.
ativos <- c(
("NVDC34.SA",
#| code-fold: show
#| message: false
start_date <- '2018-01-01'
# esses são ativos de fundos imobiliários que eu ja tive
# e queria saber fiz um péssimo investimento
# ou apenas ruim.
ativos <- c(
"NVDC34.SA",
"BCSA34.SA",
"AMZO34.SA",
"RENT3.SA",
"PRIO3.SA",
"TASA4.SA"
)
#| code-fold: show
#| message: false
start_date <- '2022-01-01'
# esses são ativos de fundos imobiliários que eu ja tive
# e queria saber fiz um péssimo investimento
# ou apenas ruim.
ativos <- c(
"NVDC34.SA",
"BCSA34.SA",
"AMZO34.SA",
"RENT3.SA",
"PRIO3.SA",
"TASA4.SA"
)
#| code-fold: show
#| message: false
start_date <- '2022-01-01'
# esses são ativos de fundos imobiliários que eu ja tive
# e queria saber fiz um péssimo investimento
# ou apenas ruim.
ativos <- c(
"NVDC34.SA",
"BCSA34.SA",
"AMZO34.SA",
"RENT3.SA",
"PRIO3.SA",
"TASA4.SA"
)
#| code-fold: show
#| message: false
# library(curl)
# has_internet_via_proxy <<- TRUE
da <- yfR::yf_get(
ativos,
first_date = start_date,
type_return = "log",
freq_data = "daily",
do_complete_data = TRUE
)
View(da)
da_tsibble <- da |>
as_tsibble(key = ticker, index = ref_date, regular = FALSE)
#| fig.height: 10
#| fig.width: 8
da_tsibble |>
autoplot(price_close, colour = "black") +
facet_wrap(~ticker, scales = "free_y", ncol = 1)
#| fig.height: 10
#| fig.width: 8
da_tsibble |>
autoplot(ret_closing_prices, colour = "black") +
facet_wrap(~ticker, scales = "free_y", ncol = 1)
data_corte <- da |>
dplyr::group_by(ticker) |>
dplyr::filter(ref_date == min(ref_date)) |>
dplyr::ungroup() |>
with(max(ref_date))
data_corte
da_train <- da |>
dplyr::filter(ref_date > data_corte)
da_tsibble |>
ACF(ret_closing_prices) |>
autoplot()
da_tsibble |>
PACF(ret_closing_prices) |>
autoplot()
da_tsibble |>
dplyr::mutate(ret2 = ret_closing_prices^2) |>
autoplot(ret2, colour = "black") +
facet_wrap(~ticker, ncol = 1)
da_tsibble |>
dplyr::mutate(ret2 = ret_closing_prices^2) |>
ACF(ret2) |>
autoplot()
da_tsibble |>
dplyr::mutate(ret2 = ret_closing_prices^2) |>
PACF(ret2) |>
autoplot()
# histogram with geom_histogram of each ticker
da_train |>
ggplot(aes(x = ret_closing_prices)) +
geom_histogram(bins = 90) +
facet_wrap(~ticker, ncol = 3)
da_train |>
group_by(ticker) |>
summarise(
gg = list(
ggplot(pick(everything()), aes(sample = ret_closing_prices)) +
geom_qq() +
geom_qq_line() +
labs(title = cur_group())
)
) |>
dplyr::pull(gg) |>
patchwork::wrap_plots()
da_train |>
group_by(ticker) |>
summarise(
gg = list(
ggplot(pick(everything()), aes(sample = ret_closing_prices)) +
geom_qq(distribution = qt, dparams = list(df = 3)) +
geom_qq_line(distribution = qt, dparams = list(df = 3)) +
labs(title = cur_group())
)
) |>
dplyr::pull(gg) |>
patchwork::wrap_plots()
garch_individual <- function(parms, ret, prog = NULL) {
if (!is.null(prog)) prog()
# daria para adicionar mais hiperparametros!!!
garch_model = ugarchspec(
variance.model = list(
model = "fGARCH",
submodel = "GARCH",
garchOrder = c(parms$m, parms$n)
),
mean.model = list(
armaOrder = c(parms$p, parms$q),
include.mean = TRUE
),
distribution.model = parms$dist
)
# as vezes ele nao converge
suppressWarnings({
fit <- ugarchfit(garch_model, data = ret)
})
fit
}
garch_individual(
parms = list(
p = 1, q = 1, m = 1, n = 1, dist = "std"
),
ret = da_train |>
dplyr::filter(ticker == "NVDC34.SA) |>
pull(ret_closing_prices)
)
garch_individual(
parms = list(
p = 1, q = 1, m = 1, n = 1, dist = "std"
),
ret = da_train |>
dplyr::filter(ticker == "NVDC34.SA") |>
pull(ret_closing_prices)
)
#| eval: false
melhores_por_ativo <- ativos |>
purrr::set_names() |>
purrr::map(melhor_garch, .progress = TRUE) |>
dplyr::bind_rows(.id = "ticker")
#| eval: false
melhores_por_ativo <- ativos |>
purrr::set_names() |>
purrr::map(melhor_garch, .progress = TRUE) |>
dplyr::bind_rows(.id = "ticker")
